"use strict";(self.webpackChunkonboarding_baania=self.webpackChunkonboarding_baania||[]).push([[749],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return g}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),s=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(t),g=r,m=d["".concat(l,".").concat(g)]||d[g]||u[g]||a;return t?o.createElement(m,i(i({ref:n},p),{},{components:t})):o.createElement(m,i({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},477:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return u}});var o=t(7462),r=t(3366),a=(t(7294),t(3905)),i=["components"],c={title:"PostGIS"},l=void 0,s={unversionedId:"docs/data-science/postgis",id:"docs/data-science/postgis",title:"PostGIS",description:"Init",source:"@site/docs/docs/data-science/postgis.md",sourceDirName:"docs/data-science",slug:"/docs/data-science/postgis",permalink:"/docs/data-science/postgis",draft:!1,editUrl:"https://github.com/baania/onboarding.baania.com/edit/master/docs/docs/data-science/postgis.md",tags:[],version:"current",frontMatter:{title:"PostGIS"},sidebar:"docs",previous:{title:"Jupyter",permalink:"/docs/data-science/jupyter"},next:{title:"PySpark",permalink:"/docs/data-science/pyspark"}},p={},u=[{value:"Init",id:"init",level:2},{value:"SQL",id:"sql",level:2},{value:"Add GEOM column",id:"add-geom-column",level:3},{value:"Cast projection unit to meter",id:"cast-projection-unit-to-meter",level:3},{value:"Find polygon from point",id:"find-polygon-from-point",level:3},{value:"Find distance betwee x &amp; y",id:"find-distance-betwee-x--y",level:3},{value:"Count points in polygon",id:"count-points-in-polygon",level:3}],d={toc:u};function g(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"init"},"Init"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE EXTENSION postgis;\n")),(0,a.kt)("h2",{id:"sql"},"SQL"),(0,a.kt)("h3",{id:"add-geom-column"},"Add GEOM column"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- use `ST_GeomFromText` for `WKT`\nALTER TABLE province ADD COLUMN geom geometry(Point, 4326);\n\nUPDATE province\nSET geom = ST_SetSRID(\n    ST_MakePoint(\n        cast(longitude AS DOUBLE PRECISION),\n        cast(latitude AS DOUBLE PRECISION)\n        ),\n    4326)\nWHERE latitude IS NOT NULL AND longitude IS NOT NULL;\n")),(0,a.kt)("h3",{id:"cast-projection-unit-to-meter"},"Cast projection unit to meter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"ST_Distance(\n    geom::geography,\n    ST_MakePoint(longitude,latitude)::geography) <= 3000\n")),(0,a.kt)("h3",{id:"find-polygon-from-point"},"Find polygon from point"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- single point\nST_DWithin(ST_SetSRID(ST_POINT(longitude,latitude),4326)::geography, geom,0)\n\n--- against another table\nSELECT *\nFROM a JOIN b\nON ST_WITHIN(points.geom, boundary.geom)\nLIMIT 10;\n")),(0,a.kt)("h3",{id:"find-distance-betwee-x--y"},"Find distance betwee x & y"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- unit depends on projection\nST_Distance(\n    the_geom::geography,\n    ST_MakePoint(longitude,latitude)::geography)\nAS distance_from_holy_land\n")),(0,a.kt)("h3",{id:"count-points-in-polygon"},"Count points in polygon"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT boundary.gid, count(points.geom) AS totale\nFROM boundary LEFT JOIN points\nON ST_CONTAINS(boundary.geom,points.geom)\nGROUP BY boundary.gid;\n")))}g.isMDXComponent=!0}}]);